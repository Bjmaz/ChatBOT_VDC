import streamlit as st
import openai

# Configura tu API Key (se obtiene desde los secrets del deploy)
openai.api_key = st.secrets["openai_api_key"]

def recomendar_gpt(prompt):
    response = openai.chat.completions.create(
        model="gpt-4-1106-preview",
        messages=[
            {"role": "system", "content": "Eres un asistente t√©cnico VDC. Solo respondes cuando se solicita una sugerencia t√©cnica bajo normativa NTP o ISO 9001. Responde de forma clara y breve, m√°ximo 3 l√≠neas."},
            {"role": "user", "content": prompt}
        ]
    )
    return response.choices[0].message.content

st.set_page_config(page_title="ChatBot VDC - Revisi√≥n T√©cnica", layout="centered")
st.title("\U0001F9E0 ChatBot VDC - DOSSIER DE CALIDAD")

formato = st.radio("\U0001F4CC Selecciona un formato:", ["Registrar elementos observados (Formato 1)", "Completar acta de sesi√≥n ICE (Formato 2)"])

if formato == "Registrar elementos observados (Formato 1)":
    st.header("Completa la informaci√≥n T√©cnica del elemento observado")

    if "elementos" not in st.session_state:
        st.session_state.elementos = []
    if "proyecto" not in st.session_state:
        st.session_state.proyecto = ""

    if not st.session_state.proyecto:
        st.session_state.proyecto = st.text_input("\U0001F3D7Ô∏è Proyecto")

    with st.form("form_elemento"):
        descripcion = st.text_input("\U0001F6E0Ô∏è Descripci√≥n del elemento")
        especialidad = st.selectbox("\U0001F58DÔ∏è Especialidad", ["", "Arquitectura", "Estructuras", "El√©ctricas", "Sanitarias"])
        enlace = st.selectbox("\U0001F517 Tipo de enlace al modelo", ["", "Autodesk BIM 360 / ACC", "Navisworks", "Revit + Env√≠o local", "QR impreso"])
        evidencia = st.text_input("\U0001F4CB Tipo de evidencia visual (ej. captura, ficha t√©cnica, otro)")
        observacion = st.text_area("\u26a0Ô∏è Observaci√≥n t√©cnica detectada")
        agregar = st.form_submit_button("‚ûï Agregar elemento")

        if agregar and descripcion and especialidad:
            st.session_state.elementos.append({
                "descripcion": descripcion,
                "especialidad": especialidad,
                "enlace": enlace,
                "evidencia": evidencia,
                "observacion": observacion
            })
            st.success("Elemento agregado con √©xito.")

    if st.session_state.elementos:
        st.subheader("Elementos registrados:")
        for idx, elem in enumerate(st.session_state.elementos):
            st.markdown(f"**{idx+1}.** {elem['descripcion']} ({elem['especialidad']})")

        if st.button("üîπ Generar recomendaciones"):
            for idx, elem in enumerate(st.session_state.elementos):
                if elem['observacion']:
                    prompt = f"Elemento: {elem['descripcion']} ({elem['especialidad']}). Enlace: {elem['enlace']}. Evidencia: {elem['evidencia']}. Observaci√≥n: {elem['observacion']}. Sugiere una acci√≥n correctiva inmediata y una buena pr√°ctica futura (m√°ximo 3 l√≠neas, seg√∫n norma t√©cnica peruana NTP o ISO 9001)."
                    respuesta = recomendar_gpt(prompt)
                    st.markdown(f"**Recomendaci√≥n para elemento {idx+1}:** {respuesta}")

            st.session_state.generado = True

    if st.session_state.get("generado"):
        st.header("‚úÖ Informaci√≥n final tras sesi√≥n ICE")
        acuerdos = st.text_area("üëç Acuerdos tomados")
        estado = st.selectbox("‚úÖ Estado del elemento", ["", "Aprobado", "Observado", "Por Corregir"])
        duracion = st.text_input("‚è±Ô∏è Duraci√≥n total de la sesi√≥n ICE (minutos)")
        responsable = st.text_input("üë®‚Äçüíº Responsable de validaci√≥n")
        fecha_proxima = st.date_input("üóìÔ∏è Fecha de pr√≥xima revisi√≥n")

        if st.button("üîπ Generar resumen final y recomendaci√≥n"):
            for idx, elem in enumerate(st.session_state.elementos):
                prompt = f"Elemento: {elem['descripcion']} ({elem['especialidad']}). Observaci√≥n: {elem['observacion']}. Proyecto: {st.session_state.proyecto}. Sugiere una recomendaci√≥n breve para debatir en pr√≥xima sesi√≥n ICE (NTP o ISO9001, m√°ximo 3 l√≠neas)."
                resultado = recomendar_gpt(prompt)
                st.markdown(f"**Recomendaci√≥n final para elemento {idx+1}:** {resultado}")

            st.markdown("---")
            st.subheader("üî¢ Resumen final ingresado por el usuario")
            st.markdown(f"**Proyecto:** {st.session_state.proyecto}")
            st.markdown(f"**Duraci√≥n:** {duracion} minutos")
            st.markdown(f"**Responsable validaci√≥n:** {responsable}")
            st.markdown(f"**Fecha pr√≥xima revisi√≥n:** {fecha_proxima}")
            st.markdown(f"**Estado del elemento:** {estado}")
            st.markdown(f"**Acuerdos:** {acuerdos}")
            st.success("Gracias por usar el ChatBOT VDC. Nos vemos en la siguiente revisi√≥n del Formato 2.")

elif formato == "Completar acta de sesi√≥n ICE (Formato 2)":
    st.header("üìÑ Completar acta de sesi√≥n ICE T√©cnica")

    if "temas" not in st.session_state:
        st.session_state.temas = []

    proyecto = st.text_input("üõ† Proyecto")
    fecha = st.date_input("üìÖ Fecha de sesi√≥n")
    lider = st.text_input("üßë‚Äçüíº L√≠der de sesi√≥n")
    participantes = st.text_area("üë• Participantes")

    with st.form("form_tema"):
        tema = st.text_input("üìÇ Tema abordado")
        problema = st.text_area("‚ö†Ô∏è Problema abordado (dejar vac√≠o si no hubo)")
        agregar_tema = st.form_submit_button("‚ûï Agregar tema")

        if agregar_tema and tema:
            st.session_state.temas.append({"tema": tema, "problema": problema})
            st.success("Tema agregado correctamente.")

    if st.session_state.temas:
        st.subheader("Temas registrados:")
        for idx, t in enumerate(st.session_state.temas):
            st.markdown(f"**{idx+1}.** {t['tema']}")

        if st.button("üí° Generar recomendaciones por tema"):
            for idx, t in enumerate(st.session_state.temas):
                if t['problema']:
                    prompt = f"Tema: {t['tema']}. Problema: {t['problema']}. Sugiere una acci√≥n inmediata o recomendaci√≥n corta seg√∫n norma peruana NTP o ISO 9001 (3 l√≠neas m√°ximo)."
                    respuesta = recomendar_gpt(prompt)
                    st.markdown(f"**Recomendaci√≥n t√©cnica para tema {idx+1}:** {respuesta}")

            st.session_state.temas_generados = True

    if st.session_state.get("temas_generados"):
        st.subheader("‚úÖ Finaliza el acta t√©cnica")
        acuerdos_ice = st.text_area("ü§ù Acuerdos finales en sesi√≥n ICE")
        duracion = st.text_input("‚è±Ô∏è Duraci√≥n total de la sesi√≥n ICE (minutos)")
        responsable = st.text_input("üë§ Responsable de validaci√≥n")

        if st.button("üìÑ Generar conclusi√≥n final"):
            resumen = ", ".join([f"{t['tema']} - {t['problema']}" for t in st.session_state.temas])
            prompt = f"Proyecto: {proyecto}. Temas: {resumen}. Acuerdos: {acuerdos_ice}. Duraci√≥n: {duracion}. Sugiere una conclusi√≥n final para mejorar futuras sesiones ICE."
            final = recomendar_gpt(prompt)
            st.markdown(f"**Conclusi√≥n t√©cnica:** {final}")

            st.markdown("---")
            st.subheader("üßæ Resumen final del usuario")
            st.markdown(f"**Proyecto:** {proyecto}")
            st.markdown(f"**Fecha:** {fecha}")
            st.markdown(f"**Participantes:** {participantes}")
            st.markdown(f"**Acuerdos:** {acuerdos_ice}")
            st.markdown(f"**Duraci√≥n:** {duracion} minutos")
            st.markdown(f"**Validado por:** {responsable}")
            st.success("Gracias por usar el ChatBOT VDC. Tu sesi√≥n ICE ha sido registrada con √©xito.")
