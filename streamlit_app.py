# streamlit_app.py
import streamlit as st
import openai

# Configura tu API Key desde los secrets
openai.api_key = st.secrets["openai_api_key"]

def recomendar_gpt(prompt):
    response = openai.chat.completions.create(
        model="gpt-4-1106-preview",
        messages=[
            {"role": "system", "content": "Eres un asistente t√©cnico VDC. Solo respondes cuando se solicita una sugerencia t√©cnica bajo normativa NTP o ISO 9001. Responde de forma clara y breve, m√°ximo 3 l√≠neas."},
            {"role": "user", "content": prompt}
        ]
    )
    return response.choices[0].message.content

st.set_page_config(page_title="ChatBot VDC - Revisi√≥n T√©cnica", layout="centered")
st.title("\U0001F9E0 ChatBot VDC - DOSSIER DE CALIDAD")

formato = st.radio("\U0001F4CB Selecciona un formato:", ["Registrar elementos observados (Formato 1)", "Completar acta de sesi√≥n ICE (Formato 2)"])

# FORMATO 1
if formato == "Registrar elementos observados (Formato 1)":
    st.subheader("Completa la informaci√≥n T√©cnica de los elementos observados")

    elementos = []
    with st.form("elemento_form"):
        proyecto = st.text_input("üèóÔ∏è Nombre del Proyecto")
        descripcion = st.text_input("üîß Descripci√≥n del elemento")
        especialidad = st.selectbox("üè∑Ô∏è Especialidad", ["", "Arquitectura", "Estructuras", "El√©ctricas", "Sanitarias"])
        enlace = st.selectbox("üîó Tipo de enlace al modelo", ["", "Autodesk BIM 360 / ACC", "Navisworks", "Revit + Env√≠o local", "QR impreso"])
        evidencia = st.text_input("üìé Tipo de evidencia visual (ej. captura, ficha t√©cnica, otro)")
        observacion = st.text_area("‚ö†Ô∏è Observaci√≥n t√©cnica detectada (dejar vac√≠o si no hay)")
        agregar = st.form_submit_button("‚ûï Agregar elemento")

        if agregar and descripcion and especialidad and observacion:
            recomendacion = recomendar_gpt(f"Elemento: {descripcion} ({especialidad}). Enlace: {enlace}. Evidencia: {evidencia}. Observaci√≥n: {observacion}. Sugiere una acci√≥n correctiva inmediata y una buena pr√°ctica futura. (3 l√≠neas, seg√∫n NTP o ISO 9001).")
            st.session_state.setdefault("elementos", []).append({
                "descripcion": descripcion,
                "especialidad": especialidad,
                "observacion": observacion,
                "recomendacion": recomendacion
            })
            st.success("Elemento registrado. Puedes agregar otro si es necesario.")

    if "elementos" in st.session_state:
        st.subheader("\U0001F5E3 Recomendaciones por elemento")
        for i, el in enumerate(st.session_state["elementos"], 1):
            st.markdown(f"**{i}.** {el['descripcion']} ({el['especialidad']}) ‚Üí {el['observacion']}")
            st.markdown(f"\- \U0001F4A1 *{el['recomendacion']}*")

        with st.form("final_formato1"):
            comentarios = st.text_area("\U0001F5E3 Comentarios finales de sesi√≥n ICE")
            acuerdos = st.text_area("\U0001F91D Acuerdos finales")
            estado = st.selectbox("‚úÖ Estado final del elemento", ["Aprobado", "Observado", "Por Corregir"])
            duracion = st.text_input("‚è±Ô∏è Duraci√≥n total de la sesi√≥n ICE")
            validador = st.text_input("üßë‚Äçüíº Responsable de validaci√≥n")
            fecha_proxima = st.date_input("üìÖ Fecha de pr√≥xima revisi√≥n")
            generar_final = st.form_submit_button("‚úÖ Finalizar revisi√≥n")

            if generar_final:
                st.subheader("\U0001F4DD Resumen del registro")
                for el in st.session_state["elementos"]:
                    st.markdown(f"- {el['descripcion']} ({el['especialidad']}): {el['observacion']}")

                resumen_prompt = "\n".join([f"{el['descripcion']} ({el['especialidad']}): {el['observacion']}" for el in st.session_state["elementos"]])
                resumen_reco = recomendar_gpt(f"Con base en estas observaciones:\n{resumen_prompt}. Redacta recomendaciones t√©cnicas muy breves por elemento para debatir en la pr√≥xima sesi√≥n ICE, seg√∫n NTP o ISO 9001.")
                st.markdown(f"\n\U0001F4A1 **Recomendaciones para pr√≥xima sesi√≥n ICE:**\n{resumen_reco}")

                st.success("‚úÖ Gracias por usar el ChatBOT VDC. Nos vemos en la siguiente revisi√≥n del Formato 2.")

# FORMATO 2
elif formato == "Completar acta de sesi√≥n ICE (Formato 2)":
    st.subheader("Completar acta de sesi√≥n ICE T√©cnica")

    temas = []
    with st.form("formato2_inicio"):
        proyecto = st.text_input("üèóÔ∏è Proyecto")
        fecha = st.date_input("üìÖ Fecha de sesi√≥n")
        lider = st.text_input("üë§ L√≠der de sesi√≥n")
        participantes = st.text_area("üë• Participantes")
        tema = st.text_input("üìÇ Tema abordado")
        problema = st.text_area("‚ö†Ô∏è Problema abordado (dejar vac√≠o si no hubo)")
        agregar_tema = st.form_submit_button("‚ûï Agregar tema")

        if agregar_tema:
            if problema:
                recomendacion = recomendar_gpt(f"Tema: {tema}, Problema: {problema}. Sugiere una acci√≥n t√©cnica inmediata (m√°x 3 l√≠neas) seg√∫n NTP o ISO 9001.")
                st.session_state.setdefault("temas", []).append({"tema": tema, "problema": problema, "reco": recomendacion})
                st.success("Tema agregado con recomendaci√≥n.")
            else:
                st.session_state.setdefault("temas", []).append({"tema": tema, "problema": "Sin problema detectado.", "reco": "No se requiere intervenci√≥n t√©cnica."})
                st.info("Tema agregado sin problema. No se generar√° recomendaci√≥n GPT.")

    if "temas" in st.session_state:
        st.subheader("\U0001F4C4 Recomendaciones por tema")
        for t in st.session_state["temas"]:
            st.markdown(f"- **{t['tema']}**: {t['problema']}\n\- \U0001F4A1 {t['reco']}")

        with st.form("final_formato2"):
            acuerdos_ice = st.text_area("ü§ù Acuerdos finales de sesi√≥n ICE")
            duracion_ice = st.text_input("‚è±Ô∏è Duraci√≥n total de la sesi√≥n ICE")
            responsable = st.text_input("üë®‚Äçüíº Responsable de validaci√≥n")
            enviar_acta = st.form_submit_button("‚úÖ Finalizar acta")

            if enviar_acta:
                resumen_temas = "\n".join([f"{t['tema']}: {t['problema']}" for t in st.session_state["temas"]])
                conclusion = recomendar_gpt(f"Con base en los temas:\n{resumen_temas}\n y acuerdos: {acuerdos_ice}, redacta una conclusi√≥n t√©cnica breve para mejorar futuras sesiones ICE.")
                st.subheader("\U0001F4DD Conclusi√≥n de sesi√≥n")
                st.markdown(conclusion)

                st.success("‚úÖ Gracias por usar el ChatBOT VDC. Tu sesi√≥n ha sido registrada con √©xito.")
